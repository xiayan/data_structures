Implementation of binary heap, skew heap and lefist heap

BinaryHeap.h and BinaryHeap.cpp: implementation of binary heap.  It is a array-based implementation.  For details, please refer to the comments in the code.

SkewHeap.h and SkewHeap.cpp: implementation of skew heap.  It is a children-pointer implementation.  Swaps are always performed after merging.

LeftistHeap.h and LeftistHeap.cpp: implementation of leftist heap.  It is a subclass of SkewHeap.  The TNode class has a rank field that keeps track of the rank information during insert/deleteMin operations to maintain the leftist tree property.  The merge operation is redefined to inquire and update the rank information.

TNode.h: simple class for tree node.  It has the rank field for LeftistHeap. "level" field and the "next" field are for the levelOrderTraversal implementation.

TQueue.h: implementation of FIFO queue of TNodes.  Used for the levelOrderTraversal method.

Timer.h: simple class for timing experiment.

AsciiTree.h and AsciiTree.cpp:  Helper class to facilitate the debugging of the tree types of heaps.  Objects of this class takes these heaps as immutable argument and draw the heap on console.  *They are just for debugging purposes, so please not include them when grading. Thanks!* 

TestHeap.cpp: a debugging program that buildHeap, insert and deleteMin operations on all three types of heaps.

main.cpp: the main program for the timing experiment.

data.txt: data file containing random number for the testing of heaps.

timing_result.txt: A sample timing output generated by the program.

Report.pdf: the report discussing the comparison of the three types of heaps.
